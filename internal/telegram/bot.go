package telegram

import (

	"log"
	"strconv"
	"strings"

	"hhruBot/internal/config"
	"hhruBot/internal/storage"
	"hhruBot/internal/hh"
	
	

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)


type Bot struct {
	Api     *tgbotapi.BotAPI
	Storage *storage.Storage
	StopChans map[int64]chan bool
}


func NewBot(cfg *config.Config, storage *storage.Storage) *Bot {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–∞–∫: %s", api.Self.UserName)

	return &Bot{
		Api:       api,
		Storage:   storage,
		StopChans: make(map[int64]chan bool),
	}
}

func (b *Bot) SendMessage(chatID int64, text string){
	msg := tgbotapi.NewMessage(chatID, text)
	_,err := b.Api.Send(msg)
	if err!=nil{
		log.Print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.Api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		switch {
		case strings.HasPrefix(text, "/start"):
			b.SendMessage(chatID, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"+
				"/tags golang,devops\n"+
				"/city –ú–æ—Å–∫–≤–∞,–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥\n"+
				"/interval 30")

		case strings.HasPrefix(text, "/tags"):
			tags := strings.TrimSpace(strings.TrimPrefix(text, "/tags"))
			if tags == "" {
				b.SendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/tags golang,devops")
				continue
			}
			err := b.Storage.SetUserSetting(chatID, "tags", tags)
			if err != nil {
				b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤")
			} else {
				_ = b.Storage.AddUser(chatID) // üëà –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				b.SendMessage(chatID, "–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "+tags)
}

		case strings.HasPrefix(text, "/city"):
			cities := strings.TrimSpace(strings.TrimPrefix(text, "/city"))
			if cities == "" {
				b.SendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/city –ú–æ—Å–∫–≤–∞,–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
				continue
			}
			err := b.Storage.SetUserSetting(chatID, "cities", cities)
				if err != nil {
					b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤")
				} else {
					_ = b.Storage.AddUser(chatID) // üëà –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					b.SendMessage(chatID, "–ì–æ—Ä–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "+cities)
}

case strings.HasPrefix(text, "/interval"):
	intervalStr := strings.TrimSpace(strings.TrimPrefix(text, "/interval"))
	intervalMin, err := strconv.Atoi(intervalStr)
	if err != nil || intervalMin <= 0 {
		b.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö, –ø—Ä–∏–º–µ—Ä:\n/interval 30")
		continue
	}

	err = b.Storage.SetUserSetting(chatID, "interval", intervalStr)
	if err != nil {
		b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
		return
	}

	b.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "+intervalStr+" –º–∏–Ω.")

	// üîÅ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –≥–æ—Ä—É—Ç–∏–Ω—É, –µ—Å–ª–∏ –µ—Å—Ç—å
	if stopCh, ok := b.StopChans[chatID]; ok {
		stopCh <- true
	}
	newStopCh := make(chan bool)
	b.StopChans[chatID] = newStopCh
	go StartUserVacancyChecker(chatID, hh.NewClient(), b.Storage, b, newStopCh)

		default:
			b.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
		}
	}
}
