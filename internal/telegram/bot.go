package telegram

import (
	"log"
	"strconv"
	"strings"
	"sync"

	"hhruBot/internal/config"
	"hhruBot/internal/hh"
	"hhruBot/internal/storage"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

type Bot struct {
	Api       *tgbotapi.BotAPI
	Storage   *storage.Storage
	HHClient  *hh.Client
	StopChans map[int64]chan struct{}
	mu        sync.Mutex
}

func NewBot(cfg *config.Config, storage *storage.Storage) *Bot {
	api, err := tgbotapi.NewBotAPI(cfg.TelegramBotToken)
	if err != nil {
		log.Fatal("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞")
	}

	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∫–∞–∫: %s", api.Self.UserName)

	return &Bot{
		Api:       api,
		Storage:   storage,
		HHClient:  hh.NewClient(),
		StopChans: make(map[int64]chan struct{}),
	}
}

func (b *Bot) SendMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, text)
	_, err := b.Api.Send(msg)
	if err != nil {
		log.Print("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–æ StopChans
func (b *Bot) stopAndRemoveChan(chatID int64) {
	b.mu.Lock()
	ch, ok := b.StopChans[chatID]
	if ok {
		// close - –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
		close(ch)
		delete(b.StopChans, chatID)
	}
	b.mu.Unlock()
}

func (b *Bot) createAndStoreStopChan(chatID int64) chan struct{} {
	b.mu.Lock()
	defer b.mu.Unlock()
	ch := make(chan struct{})
	b.StopChans[chatID] = ch
	return ch
}

func (b *Bot) hasStopChan(chatID int64) bool {
	b.mu.Lock()
	_, ok := b.StopChans[chatID]
	b.mu.Unlock()
	return ok
}

func (b *Bot) Start() {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := b.Api.GetUpdatesChan(u)

	for update := range updates {
		if update.Message == nil {
			continue
		}

		chatID := update.Message.Chat.ID
		text := update.Message.Text

		switch {
		case strings.HasPrefix(text, "/start"):
			b.Storage.AddUser(chatID)
			b.SendMessage(chatID, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HH.ru –ë–æ—Ç!

			–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏.

			‚öôÔ∏è –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
			/tags golang,devops ‚Äî –∑–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
			/city –ú–æ—Å–∫–≤–∞ ‚Äî –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥(–∞)
			/interval 30 ‚Äî –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
			/pause ‚Äî –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
			/search ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É
			/settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
			/help ‚Äî —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º`)

		case strings.HasPrefix(text, "/tags"):
			tags := strings.TrimSpace(strings.TrimPrefix(text, "/tags"))
			if tags == "" {
				b.SendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/tags golang,devops")
				continue
			}
			err := b.Storage.SetUserSetting(chatID, "tags", tags)
			if err != nil {
				b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤")
			} else {
				_ = b.Storage.AddUser(chatID)
				b.SendMessage(chatID, "–¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "+tags)
			}

		case strings.HasPrefix(text, "/city"):
			cities := strings.TrimSpace(strings.TrimPrefix(text, "/city"))
			if cities == "" {
				b.SendMessage(chatID, "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –ø—Ä–∏–º–µ—Ä:\n/city –ú–æ—Å–∫–≤–∞,–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥")
				continue
			}
			err := b.Storage.SetUserSetting(chatID, "cities", cities)
			if err != nil {
				b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤")
			} else {
				_ = b.Storage.AddUser(chatID)
				b.SendMessage(chatID, "–ì–æ—Ä–æ–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: "+cities)
			}

		case strings.HasPrefix(text, "/interval"):
			intervalStr := strings.TrimSpace(strings.TrimPrefix(text, "/interval"))
			intervalMin, err := strconv.Atoi(intervalStr)
			if err != nil || intervalMin <= 0 {
				b.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –≤ –º–∏–Ω—É—Ç–∞—Ö, –ø—Ä–∏–º–µ—Ä:\n/interval 30")
				continue
			}

			if intervalMin < 5 {
				b.SendMessage(chatID, "‚ö† –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª ‚Äî 5 –º–∏–Ω—É—Ç.")
				continue
			}

			err = b.Storage.SetUserSetting(chatID, "interval", intervalStr)
			if err != nil {
				b.SendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞")
				return
			}

			b.SendMessage(chatID, "–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: "+intervalStr+" –º–∏–Ω.")

			// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –≥–æ—Ä—É—Ç–∏–Ω—É (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ) –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
			b.stopAndRemoveChan(chatID)
			newStopCh := b.createAndStoreStopChan(chatID)
			go StartUserVacancyChecker(chatID, b.HHClient, b.Storage, b, newStopCh)

		case strings.HasPrefix(text, "/settings"):
			tags, _ := b.Storage.GetUserSetting(chatID, "tags")
			cities, _ := b.Storage.GetUserSetting(chatID, "cities")
			interval, _ := b.Storage.GetUserSetting(chatID, "interval")

			if tags == "" {
				tags = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
			}
			if cities == "" {
				cities = "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
			}

			if interval == "" {
				interval = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (30 –º–∏–Ω—É—Ç)"
			} else {
				if val, err := strconv.Atoi(interval); err == nil {
					if val < 5 {
						interval = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (5 –º–∏–Ω—É—Ç)"
					} else {
						interval += " –º–∏–Ω—É—Ç"
					}
				} else {
					interval = "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (30 –º–∏–Ω—É—Ç)"
				}
			}

			settingsMsg := "üìå *–í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n" +
				"üîñ –¢–µ–≥–∏: `" + tags + "`\n" +
				"üèôÔ∏è –ì–æ—Ä–æ–¥–∞: `" + cities + "`\n" +
				"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: `" + interval + "`"

			msg := tgbotapi.NewMessage(chatID, settingsMsg)
			msg.ParseMode = "Markdown"
			_, _ = b.Api.Send(msg)

		case strings.HasPrefix(text, "/pause"):
			err := b.Storage.PauseUser(chatID)
			if err != nil {
				b.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–∞—É–∑—É.")
				continue
			}
			// –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ä—É—Ç–∏–Ω—É
			b.stopAndRemoveChan(chatID)
			b.SendMessage(chatID, "‚è∏Ô∏è –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ‚Äî /search.")

		case strings.HasPrefix(text, "/search"):
			paused, _ := b.Storage.IsUserPaused(chatID)
			if !paused && b.hasStopChan(chatID) {
				b.SendMessage(chatID, "üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
				continue
			}

			err := b.Storage.ResumeUser(chatID)
			if err != nil {
				b.SendMessage(chatID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫.")
				continue
			}

			// –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∑–∞–ø—É—â–µ–Ω–Ω–∞—è –≥–æ—Ä—É—Ç–∏–Ω–∞ ‚Äî –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é
			if b.hasStopChan(chatID) {
				b.SendMessage(chatID, "üîÑ –ü–æ–∏—Å–∫ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
				continue
			}

			stopCh := b.createAndStoreStopChan(chatID)
			go StartUserVacancyChecker(chatID, b.HHClient, b.Storage, b, stopCh)

			b.SendMessage(chatID, "‚úÖ –ü–æ–∏—Å–∫ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω.")

		case strings.HasPrefix(text, "/help"):
			b.SendMessage(chatID, `üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
				/tags ‚Äî –∑–∞–¥–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
				/city ‚Äî –≤—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥–∞
				/interval ‚Äî —á–∞—Å—Ç–æ—Ç–∞ –ø–æ–∏—Å–∫–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
				/pause ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
				/search ‚Äî –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
				/settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
				/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É`)

		default:
			b.SendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start")
		}
	}
}
